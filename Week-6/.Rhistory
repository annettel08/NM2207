knitr::opts_chunk$set(echo = TRUE)
for (x in c(3, 6, 9)) {
print(x)
}
for (x in 1:8) {print(x)}
for (x in 1:8)
{y <- seq(from=100, to=200, by=5)
print(y[x])}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[i]
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[i]
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[i]
}
sample_means
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[[i]] <- mean(rnorm(sample_sizes[[i]))
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[[i]] <- mean(rnorm(sample_sizes[[i]]))
}
sample_means
sample_means <- rep(0, length(samples))
sample_means <- rep(0, length(sample_sizes))
sample_means <- rep(0, length(sample_sizes))
sample_means
data_list <- vector("list", length =5)
data_list <- vector("list", length =5)
data_list
data_list <- vector("list", length =5)
data_list
a <- 7:11
b <- 8:12
out <- rep(0L ,5)
for (i in seq_along(a)) {
out[i] <- a[i] + b[i]
}
out
a <- 7:11
b <- 8:12
out <- a + b
out
sample_sizes <- c(5, 10, 15, 20, 25000)
fsd <- function(sample_sizes) {
sample_sds <- rep(0, ;ength(sample_sizes))
sample_sizes <- c(5, 10, 15, 20, 25000)
fsd <- function(sample_sizes) {
sample_sds <- rep(0, length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_sds[i] <- sd(rnorm(sample_sizes[i]))
}
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
for(i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
sample_sizes <- c(5, 10, 15, 20, 25000)
fsd <- function(sample_sizes) {
sample_sds <- rep(0, length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_sds[i] <- sd(rnorm(sample_sizes[i]))
}
}
sample_sizes
sample_sizes <- c(5, 10, 15, 20, 25000)
fsd <- function(sample_sizes) {
sample_sds <- rep(0, length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_sds[i] <- sd(rnorm(sample_sizes[i]))
}
}
sample_sds
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes,fun) {
out <- vector("double", length(samples_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes,mean) {
out <- vector("double", length(samples_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- mean(rnorm(sample_sizes[i]))
}
return(out)
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes,fun) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
out
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes,mean) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- mean(rnorm(sample_sizes[i]))
}
return(out)
}
out
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
for(i in 1:5) {
print(i)
}
i <- 1
while (i<=5) {
print(i)
i <- i + 1
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, mean) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- mean(rnorm(sample_sizes[i]))
}
return(out)
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, mean) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- mean(rnorm(sample_sizes[i]))
}
return(out)
}
sample_summary <- function(sample_sizes, median) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- median(rnorm(sample_sizes[i]))
}
return(out)
}
knitr::opts_chunk$set(echo = TRUE)
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, mean) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- mean(rnorm(sample_sizes[i]))
}
return(out)
}
sample_summary <- function(sample_sizes, median) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- median(rnorm(sample_sizes[i]))
}
return(out)
}
sample_summary <- function(sample_sizes, sd) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- sd(rnorm(sample_sizes[i]))
}
return(out)
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
out
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, mean) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- mean(rnorm(sample_sizes[i]))
}
return(out)
}
out
sample_summary <- function(sample_sizes, median) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- median(rnorm(sample_sizes[i]))
}
return(out)
}
sample_summary <- function(sample_sizes, sd) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- sd(rnorm(sample_sizes[i]))
}
return(out)
}
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
sample_summary(sample_sizes,mean)
sample_summary(sample_sizes,mean)
sample_summary(sample_sizes, median)
sample_summary(sample_sizes,sd)
library(tidyverse)
ountdown <- 10
cat("Rocket launch countdown starting...\n")
while (countdown >= 1) {
cat(countdown, "...")
Sys.sleep(1)  # Pause for 1 second
countdown <- countdown - 1
}
countdown <- 10
cat("Rocket launch countdown starting...\n")
while (countdown >= 1) {
cat(countdown, "...")
Sys.sleep(1)  # Pause for 1 second
countdown <- countdown - 1
}
cat("Blastoff!\n")
word_reverse <- function(word) {
length_word <- nchar(word)
reverse_word <- ""
i <- length_word
cat("Reversed word: ")
while (i > 0) {
svd
sdav
b
fgng
library(tidyverse)
word_reverse <- function(word) {
length_word <- nchar(word)
}
word_reverse <- function(word) {
length_word <- nchar(word)
reverse_word <- ""
i <- length_word
while (i > 0) {
char <- substr(word, i, i)
reverse_word <- paste(reverse_word, char, sep = "")
i <- i - 1
}
}
word_reverse(hello)
# Prompt the user to enter a word
word <- readline(prompt = "Enter a word: ")
# Initialize variables
length_word <- nchar(word)  # Get the length of the input word
reverse_word <- ""  # Initialize an empty string to store the reversed word
i <- length_word  # Initialize a counter to the length of the word
cat("Reversed word: ")
# Use a while loop to reverse and print the word
while (i > 0) {
# Extract the i-th character from the word using substr
char <- substr(word, i, i)
# Append the character to the reversed_word
reverse_word <- paste(reverse_word, char, sep = "")
# Decrement the counter
i <- i - 1
}
# Print the reversed word
cat(reverse_word, "\n")
word
reverse_word <- function(word) {
length_word <- nchar(word)
reverse_word <- ""
i <- length_word
while (i > 0) {
char <- substr(word, i, i)
reverse_word <- paste(reverse_word, char, sep = "")
i <- i - 1
}
return(reverse_word)
}
# Prompt the user to enter a word
word <- readline(prompt = "Enter a word: ")
# Call the reverse_word function and print the result
reversed <- reverse_word(word)
cat("Reversed word:", reversed, "\n")
reverse_word(angry)
reverse_word <- function(word) {
reversed_word <- rev(unlist(strsplit(word, "")))
reversed_word <- paste(reversed_word, collapse = "")
return(reversed_word)
cat("Reversed word:", reversed, "\n")
}
reverse_word(angry)
reverse_word <- function(word) {
reversed_word <- rev(unlist(strsplit(word, "")))
reversed_word <- paste(reversed_word, collapse = "")
cat("Reversed word:", reversed_word, "\n")
return(reversed_word)
}
reverse_word(hi)
reverse_word <- function(word) {
word <- as.character(substitute(word))
reversed_word <- rev(unlist(strsplit(word, "")))
reversed_word <- paste(reversed_word, collapse = "")
cat("Reversed word:", reversed_word, "\n")
return(reversed_word)
}
reverse_word(angry)
