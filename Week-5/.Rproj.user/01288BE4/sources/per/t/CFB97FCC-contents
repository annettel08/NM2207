---
title: "Challenge-5"
author: "Annette"
date: "`r Sys.Date()`"
output:
  pdf_document: default
  html_document: default
---

```{r setup, include=TRUE}
knitr::opts_chunk$set(echo = TRUE)
```

## Questions
<br>

#### Question-1: Local Variable Shadowing 

Create an R function that defines a global variable called `x` with a value of 5. Inside the function, declare a local variable also named `x` with a value of 10. Print the value of `x` both inside and outside the function to demonstrate shadowing.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
x <- 5
local <- function(x) {x=10}

print(x)
print(local(x))
```
<br>

#### Question-2: Modify Global Variable

Create an R function that takes an argument and adds it to a global variable called `total`. Call the function multiple times with different arguments to accumulate the values in `total`.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
total <- 0
addition <- function(x) {
     total <<- x + total
}

addition(4)
addition(2423)
addition(32)
print(total)
```
<br>

#### Question-3: Global and Local Interaction 

Write an R program that includes a global variable `total` with an initial value of 100. Create a function that takes an argument, adds it to `total`, and returns the updated `total`. Demonstrate how this function interacts with the global variable.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
total <- 100
add_to_total <- function(x) { 
       total <<- x + total
      return(total)
}
add_to_total(4)
add_to_total(12)
```
<br>

#### Question-4: Nested Functions

Define a function `outer_function` that declares a local variable `x` with a value of 5. Inside `outer_function`, define another function `inner_function` that prints the value of `x`. Call both functions to show how the inner function accesses the variable from the outer function's scope.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
outer_function <- function(x=5) {
     inner_function <- function() {
         return(x)
     }
     return(inner_function())
}
outer_function()
```
<br>

#### Question-5: Meme Generator Function

Create a function that takes a text input and generates a humorous meme with the text overlaid on an image of your choice. You can use the `magick` package for image manipulation. You can find more details about the commands offered by the package, with some examples of annotating images here: https://cran.r-project.org/web/packages/magick/vignettes/intro.html

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
#install.packages("magick")
library(magick)
generate_image <- function(image_directory,text) {
     frink <- image_read(image_directory)
     frink <- image_annotate(frink, text, color = "white", size = 30)
     image_write(frink, path = image_directory)
     return(frink)
}

generate_image("meme.jpeg", "NM2207 is ok")
```
<br>

#### Question-6: Text Analysis Game  

Develop a text analysis game in which the user inputs a sentence, and the R function provides statistics like the number of words, characters, and average word length. Reward the user with a "communication skill level" based on their input.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
word_game <- function(input_text) {
      number_of_characters <- nchar(input_text)
      number_of_words <- lengths(strsplit(input_text, ' '))
      average_word_length <- mean(nchar(input_text))
      
      character_level <- ifelse(number_of_characters<= 10, "Basic",
                                ifelse(number_of_characters<=15, "Intermediate", "Advanced"))
      
      word_level <-ifelse(number_of_words<= 5, "Basic",
                          ifelse(number_of_words<=10, "Intermediate","Advanced"))
      
      avg_word_level <- ifelse(average_word_length<=5, "Basic",
                               ifelse(average_word_length<=10, "Intermediate", "Advanced"))
      
      overall_score <- 0
      
      score_guide <- c(Basic=1, Intermediate=3, Advanced=5)
      
      skill_levels <- c(character_level, word_level, avg_word_level)
      
      for (level in unique(skill_levels)) {
      count <- sum(skill_levels == level)
      overall_score <- overall_score + (count * score_guide[level])
      }
      
      cat("Statistics:\n")
      cat("Number of words:", number_of_words, "\n")
      cat("Word Skill Level:", word_level, "\n")
      cat("Number of characters:", number_of_characters, "\n")
      cat("Character Skill Level:", character_level, "\n")
      cat("Average word length:", average_word_length, "\n")
      cat("Length Skill Level:", avg_word_level, "\n")
      cat("Communication Skill Level:", overall_score, "\n")

}


word_game("I hope that the midterm is not as difficult")
```
<br>